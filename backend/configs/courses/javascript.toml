[course]
id = "javascript"
title = "JavaScript Programming"
description = "Learn JavaScript from basics to advanced concepts"

[[topics]]
id = "io"
title = "Input/Output"
description = "Working with input and output operations in JavaScript"

[[topics.problems]]
id = "io-easy-1"
title = "Basic Input"
complexity = "easy"
description = "Write a program that takes a name as input and prints a greeting."
starter_code = """
const readline = require('readline').createInterface({
  input: process.stdin,
  output: process.stdout
});

readline.question('Enter your name: ', name => {
  // Print greeting message here
  readline.close();
});
"""
visible_test_cases = [
    { input = "Alice", expected_output = "Hello, Alice" }
]
hidden_test_cases = [
    { input = "Bob", expected_output = "Hello, Bob" }
]


[[topics]]
id = "control"
title = "Control Flow"
description = "Learn if-else, loops, and control structures in JavaScript"

[[topics.problems]]
id = "control-easy-1"
title = "Odd or Even"
complexity = "easy"
description = "Check if a number is odd or even."
starter_code = """
const readline = require('readline').createInterface({
  input: process.stdin,
  output: process.stdout
});

readline.question('Enter a number: ', num => {
  const number = parseInt(num);
  // Implement odd/even check here
  readline.close();
});
"""
visible_test_cases = [
    { input = "4", expected_output = "Even" }
]
hidden_test_cases = [
    { input = "7", expected_output = "Odd" }
]

[[topics.problems]]
id = "control-medium-1"
title = "FizzBuzz"
complexity = "medium"
description = "Print numbers from 1 to N with FizzBuzz rules."
starter_code = """
const readline = require('readline').createInterface({
  input: process.stdin,
  output: process.stdout
});

readline.question('Enter a number: ', n => {
  const limit = parseInt(n);
  for (let i = 1; i <= limit; i++) {
    // Implement FizzBuzz logic here
  }
  readline.close();
});
"""
visible_test_cases = [
    { input = "5", expected_output = "1\n2\nFizz\n4\nBuzz" }
]
hidden_test_cases = [
    { input = "15", expected_output = "1\n2\nFizz\n4\nBuzz\nFizz\n7\n8\nFizz\nBuzz\n11\nFizz\n13\n14\nFizzBuzz" }
]

[[topics.problems]]
id = "control-hard-1"
title = "Prime Numbers"
complexity = "hard"
description = "Write a program to print all prime numbers up to N."
starter_code = """
const readline = require('readline').createInterface({
  input: process.stdin,
  output: process.stdout
});

function isPrime(num) {
  // Implement prime check logic here
}

readline.question('Enter a number: ', n => {
  const limit = parseInt(n);
  for (let i = 2; i <= limit; i++) {
    if (isPrime(i)) {
      console.log(i);
    }
  }
  readline.close();
});
"""
visible_test_cases = [
    { input = "10", expected_output = "2\n3\n5\n7" }
]
hidden_test_cases = [
    { input = "20", expected_output = "2\n3\n5\n7\n11\n13\n17\n19" }
]

[[topics]]
id = "functions"
title = "Functions"
description = "Define and use functions effectively in JavaScript"

[[topics.problems]]
id = "functions-easy-1"
title = "Simple Function"
complexity = "easy"
description = "Write a function that returns the square of a number."
starter_code = """
function square(n) {
  // Implement square function here
}

const num = parseInt(process.argv[2]);
console.log(square(num));
"""
visible_test_cases = [
    { input = "4", expected_output = "16" }
]
hidden_test_cases = [
    { input = "5", expected_output = "25" }
]

[[topics.problems]]
id = "functions-medium-1"
title = "Recursive Factorial"
complexity = "medium"
description = "Implement factorial using recursion."
starter_code = """
function factorial(n) {
  // Implement recursive factorial here
}

const num = parseInt(process.argv[2]);
console.log(factorial(num));
"""
visible_test_cases = [
    { input = "5", expected_output = "120" }
]
hidden_test_cases = [
    { input = "0", expected_output = "1" }
]

[[topics.problems]]
id = "functions-hard-1"
title = "Memoized Fibonacci"
complexity = "hard"
description = "Implement Fibonacci sequence using memoization."
starter_code = """
const memo = {};
function fibonacci(n) {
  // Implement memoized Fibonacci here
}

const num = parseInt(process.argv[2]);
console.log(fibonacci(num));
"""
visible_test_cases = [
    { input = "10", expected_output = "55" }
]
hidden_test_cases = [
    { input = "20", expected_output = "6765" }
]

[[topics]]
id = "oop"
title = "Object-Oriented Programming"
description = "Classes, objects, inheritance, and polymorphism in JavaScript"

[[topics.problems]]
id = "oop-easy-1"
title = "Basic Class"
complexity = "easy"
description = "Create a class `Person` with attributes `name` and `age`, and a method `introduce`."
starter_code = """
class Person {
  constructor(name, age) {
    // Initialize attributes here
  }
  
  introduce() {
    // Implement introduction method here
  }
}

const [name, age] = process.argv.slice(2);
const p = new Person(name, parseInt(age));
p.introduce();
"""
visible_test_cases = [
    { input = "Alice 30", expected_output = "Hello, my name is Alice and I am 30 years old." }
]
hidden_test_cases = [
    { input = "Bob 25", expected_output = "Hello, my name is Bob and I am 25 years old." }
]

[[topics.problems]]
id = "oop-medium-1"
title = "Inheritance"
complexity = "medium"
description = "Create a class `Student` that inherits from `Person` and adds a method `study`."
starter_code = """
class Person {
  constructor(name, age) {
    this.name = name;
    this.age = age;
  }
  
  introduce() {
    console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`);
  }
}

class Student extends Person {
  study() {
    // Implement study method here
  }
}

const [name, age] = process.argv.slice(2);
const s = new Student(name, parseInt(age));
s.introduce();
s.study();
"""
visible_test_cases = [
    { input = "Alice 20", expected_output = "Hello, my name is Alice and I am 20 years old.\nI am studying." }
]
hidden_test_cases = [
    { input = "Bob 22", expected_output = "Hello, my name is Bob and I am 22 years old.\nI am studying." }
]

[[topics.problems]]
id = "oop-hard-1"
title = "Polymorphism"
complexity = "hard"
description = "Create a method `speak` in the `Person` class and override it in the `Student` class."
starter_code = """
class Person {
  constructor(name) {
    this.name = name;
  }
  
  speak() {
    // Implement base speak method here
  }
}

class Student extends Person {
  speak() {
    // Override speak method here
  }
}

const [name] = process.argv.slice(2);
const s = new Student(name);
s.speak();
"""
visible_test_cases = [
    { input = "Alice", expected_output = "Alice says: Hello, I am a student!" }
]
hidden_test_cases = [
    { input = "Bob", expected_output = "Bob says: Hello, I am a student!" }
]

[[topics]]
id = "exceptions"
title = "Exception Handling"
description = "Handle exceptions and create custom error messages in JavaScript"

[[topics.problems]]
id = "exceptions-easy-1"
title = "Try-Catch Block"
complexity = "easy"
description = "Handle a division by zero error and print 'Cannot divide by zero'."
starter_code = """
try {
  // Attempt division by zero here
} catch (e) {
  // Handle the exception here
}
"""
visible_test_cases = [
    { input = "", expected_output = "Cannot divide by zero" }
]
hidden_test_cases = [
    { input = "", expected_output = "Cannot divide by zero" }
]

[[topics.problems]]
id = "exceptions-medium-1"
title = "Custom Exception"
complexity = "medium"
description = "Create a custom exception `NegativeNumberError` and raise it when a negative number is passed."
starter_code = """
class NegativeNumberError extends Error {}

function checkPositive(num) {
  // Check for negative number and throw custom exception
}

try {
  const num = parseInt(process.argv[2]);
  checkPositive(num);
} catch (e) {
  if (e instanceof NegativeNumberError) {
    console.log(e.message);
  }
}
"""
visible_test_cases = [
    { input = "-5", expected_output = "Negative number error!" }
]
hidden_test_cases = [
    { input = "-10", expected_output = "Negative number error!" }
]

