{"id": "functions", "title": "Functions", "description": "Define and use functions effectively in JavaScript", "problems": [{"id": "functions-easy-1", "title": "Simple Function", "description": "Write a function that returns the square of a number.", "complexity": "easy", "starter_code": "function square(n) {\n  return n * n;\n}\nconsole.log(square(4));", "visible_test_cases": [{"input": "", "expected_output": "16", "output": "16"}], "hidden_test_cases": [{"input": "", "expected_output": "25", "output": "25"}]}, {"id": "functions-medium-1", "title": "Recursive Factorial", "description": "Implement factorial using recursion.", "complexity": "medium", "starter_code": "function factorial(n) {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\nconsole.log(factorial(5));", "visible_test_cases": [{"input": "", "expected_output": "120", "output": "120"}], "hidden_test_cases": [{"input": "", "expected_output": "1", "output": "1"}]}, {"id": "functions-hard-1", "title": "Memoized Fibonacci", "description": "Implement Fibonacci sequence using memoization.", "complexity": "hard", "starter_code": "const memo = {};\nfunction fibonacci(n) {\n  if (n <= 1) return n;\n  if (memo[n]) return memo[n];\n  memo[n] = fibonacci(n - 1) + fibonacci(n - 2);\n  return memo[n];\n}\nconsole.log(fibonacci(10));", "visible_test_cases": [{"input": "", "expected_output": "55", "output": "55"}], "hidden_test_cases": [{"input": "", "expected_output": "6765", "output": "6765"}]}]}