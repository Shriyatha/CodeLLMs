{"id": "exceptions", "title": "Exception Handling", "description": "Handle exceptions and create custom error messages", "problems": [{"id": "exceptions-easy-1", "title": "Try-Except Block", "description": "Handle a division by zero error and print 'Cannot divide by zero'.", "complexity": "easy", "starter_code": "try:\n    result = 10 / 0\nexcept ZeroDivisionError:\n    print('Cannot divide by zero')", "visible_test_cases": [{"input": "", "expected_output": "Cannot divide by zero", "output": "Cannot divide by zero"}], "hidden_test_cases": [{"input": "", "expected_output": "Cannot divide by zero", "output": "Cannot divide by zero"}]}, {"id": "exceptions-medium-1", "title": "Custom Exception", "description": "Create a custom exception `NegativeNumberError` and raise it when a negative number is passed.", "complexity": "medium", "starter_code": "class NegativeNumberError(Exception):\n    pass\n\nnum = int(input())\ntry:\n    if num < 0:\n        raise NegativeNumberError('Negative number error!')\nexcept NegativeNumberError as e:\n    print(e)", "visible_test_cases": [{"input": "-5", "expected_output": "Negative number error!", "output": "Negative number error!"}], "hidden_test_cases": [{"input": "-10", "expected_output": "Negative number error!", "output": "Negative number error!"}]}, {"id": "exceptions-hard-1", "title": "File Not Found Exception", "description": "Handle a `FileNotFoundError` when trying to read a non-existent file.", "complexity": "hard", "starter_code": "try:\n    with open(input(), 'r') as file:\n        pass\nexcept FileNotFoundError:\n    print('File not found error!')", "visible_test_cases": [{"input": "nonexistent.txt", "expected_output": "File not found error!", "output": "File not found error!"}], "hidden_test_cases": [{"input": "missing.txt", "expected_output": "File not found error!", "output": "File not found error!"}]}]}