{"id": "javascript", "title": "JavaScript Programming", "description": "Learn JavaScript from basics to advanced concepts", "language": "python", "topics": [{"id": "io", "title": "Input/Output", "description": "Working with input and output operations in JavaScript", "problems": [{"id": "io-easy-1", "title": "Basic Input", "description": "Write a program that takes a name as input and prints a greeting.", "complexity": "easy", "starter_code": "const readline = require('readline').createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nreadline.question('Enter your name: ', name => {\n  console.log(`Hello, ${name}`);\n  readline.close();\n});", "visible_test_cases": [{"input": "Alice", "expected_output": "Hello, Alice", "output": "Hello, Alice"}], "hidden_test_cases": [{"input": "Bob", "expected_output": "Hello, Bob", "output": "Hello, Bob"}]}, {"id": "io-medium-1", "title": "File Operations", "description": "Write a program that reads a text file and counts the number of lines.", "complexity": "medium", "starter_code": "const fs = require('fs');\nconst filename = process.argv[2] || 'example.txt';\n\nfs.readFile(filename, 'utf8', (err, data) => {\n  if (err) {\n    console.error('Error reading file:', err);\n    return;\n  }\n  const lineCount = data.split('\\n').length;\n  console.log(lineCount);\n});", "visible_test_cases": [{"input": "file1.txt", "expected_output": "3", "output": "3"}], "hidden_test_cases": [{"input": "empty.txt", "expected_output": "0", "output": "0"}, {"input": "large.txt", "expected_output": "100", "output": "100"}]}, {"id": "io-hard-1", "title": "CSV Reader", "description": "Write a program that reads a CSV file and outputs the number of rows and columns.", "complexity": "hard", "starter_code": "const fs = require('fs');\nconst csv = require('csv-parser');\nconst filename = process.argv[2] || 'data.csv';\n\nlet rowCount = 0;\nlet colCount = 0;\n\nfs.createReadStream(filename)\n  .pipe(csv())\n  .on('data', (row) => {\n    rowCount++;\n    if (rowCount === 1) {\n      colCount = Object.keys(row).length;\n    }\n  })\n  .on('end', () => {\n    console.log(`Rows: ${rowCount}, Columns: ${colCount}`);\n  });", "visible_test_cases": [{"input": "data.csv", "expected_output": "Rows: 100, Columns: 5", "output": "Rows: 100, Columns: 5"}], "hidden_test_cases": [{"input": "large_data.csv", "expected_output": "Rows: 1000, Columns: 10", "output": "Rows: 1000, Columns: 10"}]}]}, {"id": "control", "title": "Control Flow", "description": "Learn if-else, loops, and control structures in JavaScript", "problems": [{"id": "control-easy-1", "title": "Odd or Even", "description": "Check if a number is odd or even.", "complexity": "easy", "starter_code": "const readline = require('readline').createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nreadline.question('Enter a number: ', num => {\n  const number = parseInt(num);\n  if (number % 2 === 0) {\n    console.log('Even');\n  } else {\n    console.log('Odd');\n  }\n  readline.close();\n});", "visible_test_cases": [{"input": "4", "expected_output": "Even", "output": "Even"}], "hidden_test_cases": [{"input": "7", "expected_output": "Odd", "output": "Odd"}]}, {"id": "control-medium-1", "title": "FizzBuzz", "description": "Print numbers from 1 to N with FizzBuzz rules.", "complexity": "medium", "starter_code": "const readline = require('readline').createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nreadline.question('Enter a number: ', n => {\n  const limit = parseInt(n);\n  for (let i = 1; i <= limit; i++) {\n    if (i % 15 === 0) {\n      console.log('FizzBuzz');\n    } else if (i % 3 === 0) {\n      console.log('Fizz');\n    } else if (i % 5 === 0) {\n      console.log('Buzz');\n    } else {\n      console.log(i);\n    }\n  }\n  readline.close();\n});", "visible_test_cases": [{"input": "5", "expected_output": "1\n2\nFizz\n4\nBuzz", "output": "1\n2\nFizz\n4\nBuzz"}], "hidden_test_cases": [{"input": "15", "expected_output": "1\n2\nFizz\n4\nBuzz\nFizz\n7\n8\nFizz\nBuzz\n11\nFizz\n13\n14\nFizzBuzz", "output": "1\n2\nFizz\n4\nBuzz\nFizz\n7\n8\nFizz\nBuzz\n11\nFizz\n13\n14\nFizzBuzz"}]}, {"id": "control-hard-1", "title": "Prime Numbers", "description": "Write a program to print all prime numbers up to N.", "complexity": "hard", "starter_code": "const readline = require('readline').createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nfunction isPrime(num) {\n  for (let i = 2, s = Math.sqrt(num); i <= s; i++) {\n    if (num % i === 0) return false;\n  }\n  return num > 1;\n}\n\nreadline.question('Enter a number: ', n => {\n  const limit = parseInt(n);\n  for (let i = 2; i <= limit; i++) {\n    if (isPrime(i)) {\n      console.log(i);\n    }\n  }\n  readline.close();\n});", "visible_test_cases": [{"input": "10", "expected_output": "2\n3\n5\n7", "output": "2\n3\n5\n7"}], "hidden_test_cases": [{"input": "20", "expected_output": "2\n3\n5\n7\n11\n13\n17\n19", "output": "2\n3\n5\n7\n11\n13\n17\n19"}]}]}, {"id": "functions", "title": "Functions", "description": "Define and use functions effectively in JavaScript", "problems": [{"id": "functions-easy-1", "title": "Simple Function", "description": "Write a function that returns the square of a number.", "complexity": "easy", "starter_code": "function square(n) {\n  return n * n;\n}\nconsole.log(square(4));", "visible_test_cases": [{"input": "", "expected_output": "16", "output": "16"}], "hidden_test_cases": [{"input": "", "expected_output": "25", "output": "25"}]}, {"id": "functions-medium-1", "title": "Recursive Factorial", "description": "Implement factorial using recursion.", "complexity": "medium", "starter_code": "function factorial(n) {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\nconsole.log(factorial(5));", "visible_test_cases": [{"input": "", "expected_output": "120", "output": "120"}], "hidden_test_cases": [{"input": "", "expected_output": "1", "output": "1"}]}, {"id": "functions-hard-1", "title": "Memoized Fibonacci", "description": "Implement Fibonacci sequence using memoization.", "complexity": "hard", "starter_code": "const memo = {};\nfunction fibonacci(n) {\n  if (n <= 1) return n;\n  if (memo[n]) return memo[n];\n  memo[n] = fibonacci(n - 1) + fibonacci(n - 2);\n  return memo[n];\n}\nconsole.log(fibonacci(10));", "visible_test_cases": [{"input": "", "expected_output": "55", "output": "55"}], "hidden_test_cases": [{"input": "", "expected_output": "6765", "output": "6765"}]}]}, {"id": "oop", "title": "Object-Oriented Programming", "description": "Classes, objects, inheritance, and polymorphism in JavaScript", "problems": [{"id": "oop-easy-1", "title": "Basic Class", "description": "Create a class `Person` with attributes `name` and `age`, and a method `introduce`.", "complexity": "easy", "starter_code": "class Person {\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n  \n  introduce() {\n    console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`);\n  }\n}\n\nconst p = new Person('Alice', 30);\np.introduce();", "visible_test_cases": [{"input": "", "expected_output": "Hello, my name is Alice and I am 30 years old.", "output": "Hello, my name is Alice and I am 30 years old."}], "hidden_test_cases": [{"input": "", "expected_output": "Hello, my name is Bob and I am 25 years old.", "output": "Hello, my name is Bob and I am 25 years old."}]}, {"id": "oop-medium-1", "title": "Inheritance", "description": "Create a class `Student` that inherits from `Person` and adds a method `study`.", "complexity": "medium", "starter_code": "class Student extends Person {\n  study() {\n    console.log('I am studying.');\n  }\n}\n\nconst s = new Student('Alice', 20);\ns.introduce();\ns.study();", "visible_test_cases": [{"input": "", "expected_output": "Hello, my name is Alice and I am 20 years old.\nI am studying.", "output": "Hello, my name is Alice and I am 20 years old.\nI am studying."}], "hidden_test_cases": [{"input": "", "expected_output": "Hello, my name is Bob and I am 22 years old.\nI am studying.", "output": "Hello, my name is Bob and I am 22 years old.\nI am studying."}]}, {"id": "oop-hard-1", "title": "Polymorphism", "description": "Create a method `speak` in the `Person` class and override it in the `Student` class.", "complexity": "hard", "starter_code": "class Person {\n  speak() {\n    console.log(`${this.name} says: Hello!`);\n  }\n}\n\nclass Student extends Person {\n  speak() {\n    console.log(`${this.name} says: Hello, I am a student!`);\n  }\n}\n\nconst s = new Student('Alice', 20);\ns.speak();", "visible_test_cases": [{"input": "", "expected_output": "Alice says: Hello, I am a student!", "output": "Alice says: Hello, I am a student!"}], "hidden_test_cases": [{"input": "", "expected_output": "Bob says: Hello, I am a student!", "output": "Bob says: Hello, I am a student!"}]}]}, {"id": "exceptions", "title": "Exception Handling", "description": "Handle exceptions and create custom error messages in JavaScript", "problems": [{"id": "exceptions-easy-1", "title": "Try-Catch Block", "description": "Handle a division by zero error and print 'Cannot divide by zero'.", "complexity": "easy", "starter_code": "try {\n  const result = 10 / 0;\n  if (!isFinite(result)) {\n    throw new Error('Division by zero');\n  }\n} catch (e) {\n  console.log('Cannot divide by zero');\n}", "visible_test_cases": [{"input": "", "expected_output": "Cannot divide by zero", "output": "Cannot divide by zero"}], "hidden_test_cases": [{"input": "", "expected_output": "Cannot divide by zero", "output": "Cannot divide by zero"}]}, {"id": "exceptions-medium-1", "title": "Custom Exception", "description": "Create a custom exception `NegativeNumberError` and raise it when a negative number is passed.", "complexity": "medium", "starter_code": "class NegativeNumberError extends Error {}\n\nfunction checkPositive(num) {\n  if (num < 0) {\n    throw new NegativeNumberError('Negative number error!');\n  }\n}\n\ntry {\n  checkPositive(-5);\n} catch (e) {\n  if (e instanceof NegativeNumberError) {\n    console.log(e.message);\n  }\n}", "visible_test_cases": [{"input": "", "expected_output": "Negative number error!", "output": "Negative number error!"}], "hidden_test_cases": [{"input": "", "expected_output": "Negative number error!", "output": "Negative number error!"}]}, {"id": "exceptions-hard-1", "title": "File Not Found Exception", "description": "Handle a `FileNotFoundError` when trying to read a non-existent file in Node.js.", "complexity": "hard", "starter_code": "const fs = require('fs');\n\nfs.readFile('non_existent_file.txt', 'utf8', (err, data) => {\n  if (err) {\n    if (err.code === 'ENOENT') {\n      console.log('File not found error!');\n    } else {\n      console.log('Other error:', err.message);\n    }\n  }\n});", "visible_test_cases": [{"input": "", "expected_output": "File not found error!", "output": "File not found error!"}], "hidden_test_cases": [{"input": "", "expected_output": "File not found error!", "output": "File not found error!"}]}]}], "last_modified": 1744896579.474425}